
[scratchpad]
command=X="$(swaymsg -t get_tree | jq '.nodes[] | select(.name == "__i3").nodes[] | select(.name == "__i3_scratch").floating_nodes | length')"; if [[ "$X" > 0 ]]; then echo "(S:$X)"; fi
interval=once
signal=2

[volume]
# command=if [[ $button ]]; then alacritty --class alsamixer -e alsamixer; else amixer get Master | sed -nre 's/.*\[off\].*/      muted/p; s/.*\[(.*%)\].*/    \1/p'; fi
command=amixer get Master | tail -1 | sed -nre 's/.*\[off\].*/      muted/p; s/.*\[(.*%)\].*/    \1/p'
interval=once
signal=1

# Hourly weather
# [weather]
# command=if [[ $button ]]; then $HOME/bin/weather; else curl -Ss 'https://wttr.in?0&T&Q' | cut -c 16- | head -2 | xargs echo; fi
# command=curl -Ss 'https://wttr.in?0&T&Q' | cut -c 16- | head -2 | xargs echo
# command=curl 'https://wttr.in?format=j1' | jq -r '(.current_condition | .[] | ((.weatherDesc | .[].value) + " " + .temp_C + "(" + .FeelsLikeC + ") °C")) + " (" + (.nearest_area | .[] | ((.areaName | .[].value) + ", " + (.region | .[].value))) + ")"'
# command=curl 'https://wttr.in/?format=%C+%t(%f)+(%l)'
# interval=3600
# color=#A4C2F4

# Query my default IP address only on startup
# [ip]
# command=if [[ $button ]]; then alacritty --class network_manager -e nmtui; else hostname -i | awk '{ print "IP:" $(NF - 1) }'; fi
# command=hostname -I | awk '{ print "IP:" $1 }'
# interval=once
# color=#91E78B

[wifi]
command=nmcli -f IN-USE,SSID,SIGNAL -t --overview device wifi | awk -F: '$1 == "*" { print $2 " (" $3 "%)" }'
interval=60

# "bluetooth"
# "cpu"
# "memory"
# [temperature]
# command=sensors | awk '/Core/ { X=substr($3, 2, 4)+0; if(X > M) M = X } END { print "  " M " °C " }'
# interval=10

# "backlight",
[battery]
command=if [[ -n $(which upower) ]]; then BAT=$(upower -e | grep 'BAT'); ( upower -i $BAT; upower --monitor-detail $BAT) | awk -f $HOME/.config/i3blocks/parse_battery.awk; fi
interval=persist

# "battery#bat2",

# Use a docker container that provides the time every minute accurately, instead of starting a new process every minute
# fallback to a while loop if the docker container fails or does not exist
[time]
# command=while :; do docker run -it --rm -e TZ="America/Toronto" -e TIME_FORMAT="Mon 02 Jan 2006 15:04" current-time:custom; done
# command=docker run -it --rm -e TZ="America/Toronto" -e TIME_FORMAT="Mon 02 Jan 2006 15:04" current-time:custom
command=while :; do date "+%a %b %d, %Y %H:%M"; sleep $(( 60 - $(date "+%S") )); done
interval=persist

# "tray"

# [notification]
# command=swaync-client -swb | while read -r line; do echo $line | jq '.class' | sed -nre 's/none/ /p; s/notification/ ! /p; s/dnd-notification/ ! /p; s/dnd-none/ /p'; done
# command=swaync-client -swb | jq '.class' | sed -nre 's/none/ /p; s/notification/ ! /p; s/dnd-notification/ ! /p; s/dnd-none/ /p'; done
# interval=persist
