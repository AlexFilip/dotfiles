
# Complete reference: `man 5 sway`

### Variables
# Logo key. Use Mod1 for Alt.
# Mod1 = Alt
# Mod4 = Super (Command or Windows key)
set $mod Mod4

# Include machine-specific configuration
# Path is expanded to 
# Docs: https://i3wm.org/docs/userguide.html#include
include specific/`hostname`

# Home row direction keys, like vim
set $left  h
set $down  j
set $up    k
set $right l

# Focus
bindsym $mod+$left  focus left
bindsym $mod+$down  focus down
bindsym $mod+$up    focus up
bindsym $mod+$right focus right

# Moving windows
bindsym $mod+Shift+$left  move left
bindsym $mod+Shift+$down  move down
bindsym $mod+Shift+$up    move up
bindsym $mod+Shift+$right move right

# Layout control
bindsym $mod+z split horizontal; layout tabbed
bindsym $mod+v layout toggle splith splitv
bindsym $mod+x layout toggle tabbed splith

# Move focus to the parent container
bindsym $mod+a focus parent
bindsym $mod+s focus child

# Make the current focus fullscreen
bindsym $mod+f fullscreen

# Toggle the current focus between tiling and floating mode
bindsym $mod+Shift+f floating toggle

# Swap focus between the tiling area and the floating area
# bindsym $mod+ focus mode_toggle

# All of the apps I use currently use wayland
xwayland disable
# xwayland enable

# Workspaces:
bindsym $mod+comma  focus output $SCREEN_LEFT
bindsym $mod+period focus output $SCREEN_RIGHT

bindsym $mod+Shift+comma  move container to output $SCREEN_LEFT
bindsym $mod+Shift+period move container to output $SCREEN_RIGHT

# Move window or focus to workspace depending on current output
bindsym $mod+1 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 1
bindsym $mod+2 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 2
bindsym $mod+3 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 3
bindsym $mod+4 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 4
bindsym $mod+5 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 5
bindsym $mod+6 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 6
bindsym $mod+7 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 7
bindsym $mod+8 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 8
bindsym $mod+9 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 9
bindsym $mod+0 exec ~/bin/pvt/sway-cmd move_focus_to_workspace 10

bindsym $mod+left  workspace prev
bindsym $mod+right workspace next

bindsym $mod+Shift+1 exec ~/bin/pvt/sway-cmd move_window_to_workspace 1
bindsym $mod+Shift+2 exec ~/bin/pvt/sway-cmd move_window_to_workspace 2
bindsym $mod+Shift+3 exec ~/bin/pvt/sway-cmd move_window_to_workspace 3
bindsym $mod+Shift+4 exec ~/bin/pvt/sway-cmd move_window_to_workspace 4
bindsym $mod+Shift+5 exec ~/bin/pvt/sway-cmd move_window_to_workspace 5
bindsym $mod+Shift+6 exec ~/bin/pvt/sway-cmd move_window_to_workspace 6
bindsym $mod+Shift+7 exec ~/bin/pvt/sway-cmd move_window_to_workspace 7
bindsym $mod+Shift+8 exec ~/bin/pvt/sway-cmd move_window_to_workspace 8
bindsym $mod+Shift+9 exec ~/bin/pvt/sway-cmd move_window_to_workspace 9
bindsym $mod+Shift+0 exec ~/bin/pvt/sway-cmd move_window_to_workspace 10

# Applications
set $main_tmux_session main
set $editor_title Neovim

exec foot --server
set $term foot
set $term-client footclient
set $term_app_id_opt --app-id
set $term_title_opt --title
set $term_remain_open_opt --hold

# lock-wm makes sure the wallpaper is set before activating swaylock
set $lock lock-wm

exec_always set-wallpaper &

# Lock after 5 minutes, screen off after 10
# Screen locking
exec swayidle -w \
       timeout 300 "$lock" \
       timeout 600 'swaymsg "output * dpms off"' \
       resume 'swaymsg "output * dpms on"' \
       before-sleep "$lock" \
       lock "$lock"

bindsym $mod+Shift+grave exec echo "Shutdown\nRestart\nLock\nLogOut" | fzfmenu | power-control

### Input configuration
# You can get the names of your inputs by running: swaymsg -t get_inputs
input "1267:12423:ELAN1300:00_04F3:3087_Touchpad" {
    dwt enabled
    click_method clickfinger
    # tap enabled
    # natural_scroll enabled
    # middle_emulation enabled
}

# Map fn buttons on trackball mouse
# Can also see all inputs (but not event number) with raw info using `swaymsg -t get_inputs -r | jq -r '.[].identifier'`
# Get input event number from device name. Use `ls -l /dev/input/by-id` and find which event it symlinks to (there is also /dev/input/by-path, which might help)
# To find the names of events use `sudo libinput debug-events --device /dev/input/by-id/<device-id>`
set $TrackballMouse "1390:268:ELECOM_TrackBall_Mouse_HUGE_TrackBall"
# bindsym --input-device=$TrackballMouse           --whole-window BTN_LEFT    exec ... down # Left mouse button
# bindsym --input-device=$TrackballMouse --release --whole-window BTN_LEFT    exec ... up   # Left mouse button
# bindsym --input-device=$TrackballMouse           --whole-window BTN_RIGHT   exec ... down # Right mouse button
# bindsym --input-device=$TrackballMouse --release --whole-window BTN_RIGHT   exec ... up   # Right mouse button
# bindsym --input-device=$TrackballMouse           --whole-window BTN_MIDDLE  exec ... down # Middle mouse button/Scroll wheel click
# bindsym --input-device=$TrackballMouse --release --whole-window BTN_MIDDLE  exec ... up   # Middle mouse button/Scroll wheel click
# bindsym --input-device=$TrackballMouse           --whole-window BTN_EXTRA   exec ... down # "Forward" button
# bindsym --input-device=$TrackballMouse --release --whole-window BTN_EXTRA   exec ... up   # "Forward" button
# bindsym --input-device=$TrackballMouse           --whole-window BTN_SIDE    exec ... down # "Back" button
# bindsym --input-device=$TrackballMouse --release --whole-window BTN_SIDE    exec ... up   # "Back" button

input $TrackballMouse {
    # Scroll while pressing the Fn1 button
    scroll_button BTN_FORWARD
    scroll_method on_button_down
}

bindsym XF86TouchpadToggle input type:touchpad events toggle enabled disabled
input type:touchpad {
  accel_profile adaptive
  click_method clickfinger
  drag enabled
  dwt enabled
  # events disabled_on_external_mouse
  middle_emulation enabled
  pointer_accel 0.5
  scroll_method two_finger
  tap disabled
}

# bindsym KEY_F20 exec echo "Mute mic" >> $HOME/sway-debug
# bindsym KEY_BOOKMARKS exec echo "Bookmarks" >> $HOME/sway-debug
# bindsym KEY_KEYBOARD exec echo "Keyboard" >> $HOME/sway-debug
# bindsym KEY_CONFIG exec echo "Config" >> $HOME/sway-debug
# bindsym KEY_WLAN exec echo "WLAN" >> $HOME/sway-debug

# BTN_FORWARD is already set to scroll above

# Fn1 button
# bindsym --input-device=$TrackballMouse           --whole-window --no-repeat BTN_FORWARD exec ~/bin/pvt/elecom-mouse-fn-button Fn1 down
# bindsym --input-device=$TrackballMouse --release --whole-window --no-repeat BTN_FORWARD exec ~/bin/pvt/elecom-mouse-fn-button Fn1 up

# Fn2 button
bindsym --input-device=$TrackballMouse           --whole-window --no-repeat BTN_BACK seat - cursor press   BTN_MIDDLE
bindsym --input-device=$TrackballMouse --release --whole-window --no-repeat BTN_BACK seat - cursor release BTN_MIDDLE

# Fn3 Button
# bindsym --input-device=$TrackballMouse           --whole-window --no-repeat BTN_TASK exec ~/bin/pvt/elecom-mouse-fn-button Fn3 down
# bindsym --input-device=$TrackballMouse --release --whole-window --no-repeat BTN_TASK exec ~/bin/pvt/elecom-mouse-fn-button Fn3 up

### Key bindings

# Kill focused window
bindsym $mod+Shift+q kill

# Scratchpad
bindsym $mod+Shift+o move container to scratchpad, exec pkill -x -SIGRTMIN+2 i3blocks
bindsym $mod+o scratchpad show, exec pkill -x -SIGRTMIN+2 i3blocks

# Start a terminal
bindsym $mod+t exec $term-client $term_title_opt Terminal, mode "default"

# Text editor
# bindsym $mod+e exec $term-client $term_title_opt $editor_title nvim
bindsym $mod+e exec open-app emacs

bindsym $mod+c mode Capture
mode "Capture" {
     bindsym $mod+b exec ~/bin/emacs-capture b, mode "default"
     bindsym      b exec ~/bin/emacs-capture b, mode "default"
     
     bindsym $mod+c exec ~/bin/emacs-capture c, mode "default"
     bindsym      c exec ~/bin/emacs-capture c, mode "default"
     
     bindsym $mod+t exec ~/bin/emacs-capture t, mode "default"
     bindsym      t exec ~/bin/emacs-capture t, mode "default"
     
     bindsym $mod+j exec ~/bin/emacs-capture j, mode "default"
     bindsym      j exec ~/bin/emacs-capture j, mode "default"

     bindsym $mod+i exec ~/bin/emacs-capture i, mode "default"
     bindsym      i exec ~/bin/emacs-capture i, mode "default"

     bindsym Return mode "default"
     bindsym Escape mode "default"
}
for_window [title="Org Capture"] floating enable, resize set width 800 px height 600 px, move position center

# MPV
bindsym $mod+m exec mpv "$(wl-paste --primary)"

# Obsidian (Notes)
bindsym $mod+n exec open-app obsidian

bindsym $mod+u mode Terminal
mode "Terminal" {
    # Bare terminal (not running with client, so that I have control over this)
    bindsym $mod+t exec $term, mode "default"
    bindsym      t exec $term, mode "default"

    # Multiplex/tmux
    bindsym $mod+m exec $term-client $term_title_opt Tmux tmux new -As $main_tmux_session, mode "default"
    bindsym      m exec $term-client $term_title_opt Tmux tmux new -As $main_tmux_session, mode "default"

    # Htop
    bindsym $mod+h exec $term-client $term_title_opt Tmux tmux new -As $main_tmux_session htop, mode "default"
    bindsym      h exec $term-client $term_title_opt Tmux tmux new -As $main_tmux_session htop, mode "default"

    # Emacs + Tmux
    bindsym $mod+e exec $term-client $term_title_opt $editor_title tmux new -As editor open-app emacs -nw, mode "default"
    bindsym      e exec $term-client $term_title_opt $editor_title tmux new -As editor open-app emacs -nw, mode "default"

    # Neovim + Tmux
    bindsym $mod+v exec $term-client $term_title_opt $editor_title tmux new -As editor nvim, mode "default"
    bindsym      v exec $term-client $term_title_opt $editor_title tmux new -As editor nvim, mode "default"

    bindsym Return mode "default"
    bindsym Escape mode "default"
}

# Web browser
bindsym $mod+w exec open-url, mode "default"

# Utilities
# bindsym $mod+bracketright exec $term $term_app_id_opt weather $term_remain_open_opt $HOME/bin/weather
bindsym $mod+bracketright exec $term-client $term_app_id_opt weather $term_remain_open_opt $HOME/bin/weather

# Start launcher
bindsym $mod+space exec all-commands | fzfmenu | open-app

# Take screenshots (complicated condition ensures that there is only one instance running
bindsym       Print exec [[ -z $(ps aux | awk "/slurp[[:space:]]-d/ && !/[[:space:]]sh[[:space:]]-c[[:space:]]/ {print}") ]] && grim -g "$(slurp -d)" "screenshots/$(date "+%Y-%m-%d-%H-%M-%S").png"
bindsym Shift+Print exec grim -g "$(swaymsg -t get_outputs | jq -r '.[] | select(.focused).rect | map_values(tostring) | .x + "," + .y + " " + .width + "x" + .height')" "screenshots/$(date "+%Y-%m-%d-%H-%M-%S").png" > $HOME/grim-output 2>&1

# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal

bindsym $mod+Shift+r reload

# Floating windows
for_window [app_id="fzfmenu"] floating enable, resize set 850 870
for_window [app_id="weather"] floating enable, resize set 1275 900
for_window [app_id="FloatingTerm"] floating enable, resize set 1600 1800

bindsym $mod+minus gaps inner all plus  4;  gaps outer all plus  2
bindsym $mod+equal gaps inner all minus 4;  gaps outer all minus 2
bindsym $mod+plus  gaps inner all set   12; gaps outer all set   6

gaps inner 12
gaps outer 6

# Sound
# status-bar: -SIGUSR1 status-bar
# i3blocks:   -SIGRTMIN+1 i3blocks
bindsym XF86AudioMute        exec amixer set Master toggle && pkill -x -SIGRTMIN+1 i3blocks
bindsym XF86AudioRaiseVolume exec amixer set Master 5%+    && pkill -x -SIGRTMIN+1 i3blocks
bindsym XF86AudioLowerVolume exec amixer set Master 5%-    && pkill -x -SIGRTMIN+1 i3blocks

# Screen brightness
bindsym --locked XF86MonBrightnessUp   exec light -S "$(light -G | awk '{ b = int($1 + 5); print (b >   0 ? b :   0) }')"
bindsym --locked XF86MonBrightnessDown exec light -S "$(light -G | awk '{ b = int($1 - 5); print (b < 100 ? b : 100) }')"

# Theme
# border pixel 2
default_border pixel 2
default_floating_border pixel 2
smart_borders on
titlebar_padding 11 4
titlebar_border_thickness 3

# Nord colors https://github.com/nordtheme/nord/blob/develop/src/nord.css
set $border     #81A1C1
set $text       #eceff4
set $background #3E434F
set $indicator  #8fbcbb

set $background_unfocused #2e3440
set $text_unfocused       #d8dee9
set $border_unfocused     #4c566a

set $border_urgent #ebcb8b
set $text_urgent   $text

# Src : https://github.com/lokesh-krishna/dotfiles/blob/master/nord-v3/config/sway/config
## Window decoration
# class                 border           backgr.                  text                    indicator   child_border
client.focused          $border          $background              $text                   $indicator            $border
client.focused_inactive $background      $background_unfocused    $text_unfocused         $border_unfocused     $border_unfocused
client.unfocused        $background      $background_unfocused    $text_unfocused         $border_unfocused     $border_unfocused
client.urgent           $border_urgent   $border_urgent           $background_unfocused   $indicator            $border_urgent
client.background       $background_unfocused

font pango:NotoSans Mono Regular 11

bar {
    font pango:DejaVu Sans Mono, FontAwesome 12
    position top
    # workspace_command ~/bin/pvt/swaybar-workspace
    status_command i3blocks
    gaps 4
    strip_workspace_numbers yes
    # status_command /home/alex/bin/go/status-bar

    colors {
        separator          $indicator
        background         $background
        statusline         $text

        #                   border         background  text
        focused_workspace  $border        $background $text
        active_workspace   $border        $background $text_unfocused
        inactive_workspace $background    $background $text_unfocused
        urgent_workspace   $border_urgent $background $text_urgent
    }
}

# include /etc/sway/config.d/*
# This is all I really used from /etc/sway/config.d/50-systemd-user.conf
exec systemctl --user import-environment WAYLAND_DISPLAY SWAYSOCK XDG_CURRENT_DESKTOP

exec hash dbus-update-activation-environment 2>/dev/null && \
        dbus-update-activation-environment --systemd WAYLAND_DISPLAY SWAYSOCK XDG_CURRENT_DESKTOP=sway

# Notification center
exec mako
